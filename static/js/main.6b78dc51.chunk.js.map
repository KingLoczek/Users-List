{"version":3,"sources":["contexts/Users/index.tsx","components/UsersList/index.tsx","components/DebounceInput/index.tsx","components/Header/index.tsx","components/Main/index.tsx","contexts/ThemeContext/index.tsx","components/ChangeTheme/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UsersContext","React","createContext","UsersProvider","children","searchText","useState","users","setUsers","useEffect","axios","get","then","response","data","catch","error","console","log","filteredUsers","useMemo","trim","length","filter","person","name","toLowerCase","includes","Provider","value","UsersList","useContext","className","map","Person","key","username","Debounce","onChange","e","target","debounceTimeout","placeholder","Header","Main","showUser","setShowUser","Users","ThemeContext","ThemeProvider","theme","setTheme","color","backgroundColor","document","body","style","background","toggleTheme","ChangeTheme","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gVAiBaA,EAAeC,IAAMC,cAAqB,IAgCxCC,EA/BmC,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAAgB,EAChDC,mBAAmB,IAD6B,mBACnEC,EADmE,KAC5DC,EAD4D,KAG1EC,qBAAU,WACNC,IACCC,IADD,8CAECC,MAAK,SAACC,GACHL,EAASK,EAASC,SAErBC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAElB,IAEF,IAAMG,EAAgBC,mBAAQ,WAC1B,OAAIf,EAAWgB,OAAOC,OAAS,GAAKf,EAAMe,OAAS,EAC1Cf,EAAMgB,QAAO,SAACC,GAAD,OAClBA,EAAOC,KAAKC,cAAcC,SAAStB,EAAWqB,kBAGzCnB,IAER,CAACF,EAAYE,IAElB,OACI,kBAACP,EAAa4B,SAAd,CAAuBC,MAAOV,GACzBf,IClBE0B,G,MAfa,WACxB,IAAMX,EAAgBY,qBAAW/B,GAEjC,OACI,yBAAKgC,UAAU,YACX,wBAAIA,UAAU,QACTb,EAAcc,KAAI,SAACC,GAAD,OACf,wBAAIC,IAAKD,EAAOT,MACZ,8BAAOS,EAAOT,MADlB,IAEMS,EAAOE,iB,QCDlBC,G,MAXkB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjC,OACM,kBAAC,gBAAD,CACEA,SAAU,SAACC,GAAD,OAAOD,EAASC,EAAEC,OAAOX,QACnCY,gBAAiB,IACjBT,UAAU,cACVU,YAAY,6BCAPC,G,MAXS,WAEpB,OAEI,yBAAKX,UAAU,cACX,4CCYGY,EAdM,WAAO,IAAD,EACStC,mBAAS,IADlB,mBAChBuC,EADgB,KACNC,EADM,KAEvB,OACA,6BACI,6BACK,kBAAC,EAAD,OAED,kBAACC,EAAD,CAAe1C,WAAYwC,GACvB,kBAAC,EAAD,CAAUP,SAAUQ,IACpB,kBAAC,EAAD,SCVHE,EAAe/C,IAAMC,cAC9B,IAES+C,EAA0B,SAAC,GAAgB,IAAf7C,EAAc,EAAdA,SAAc,EACzBE,mBAAgB,SADS,mBAC5C4C,EAD4C,KACrCC,EADqC,KAK7CC,EAAkB,UAAVF,EAAoB,QAAU,OACtCG,EAA4B,UAAVH,EAAoB,OAAS,OAKrD,OAHAI,SAASC,KAAKC,MAAMJ,MAAQA,EAC5BE,SAASC,KAAKC,MAAMC,WAAaJ,EAG7B,kBAACL,EAAapB,SAAd,CAAuBC,MAAQ,CAACqB,QAAOQ,YAVvB,WAChBP,EAAoB,UAAVD,EAAoB,OAAO,YAUhC9C,ICPEuD,G,MAVe,WAAO,IAAD,EACH5B,qBAAWiB,GAAjCE,EADyB,EACzBA,MAAOQ,EADkB,EAClBA,YACd,OACI,6BACI,4BAAQ1B,UAAU,eAAe4B,QAASF,GAA1C,aACyB,UAAVR,EAAoB,OAAO,QAD1C,YCMGW,EARH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEd5D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM4D,c","file":"static/js/main.6b78dc51.chunk.js","sourcesContent":["import React, {useState, useEffect, useMemo} from 'react';\nimport axios from 'axios';\n\ntype Users = Person[];\ntype Person = {\n    name:string;\n    username:string;\n}\ntype UsersProviderProps = {\n    children:React.ReactNode;\n    searchText:string;\n   \n}\n\n//\n//onSearchPhraseChange=(phrase:string) => void;\n\nexport const UsersContext = React.createContext<Users>([]);\nconst UsersProvider:React.FC<UsersProviderProps>= ({children, searchText}) => {\n    const [users, setUsers] = useState<Person[]>([]); \n       \n    useEffect(() => {\n        axios\n        .get(`https://jsonplaceholder.typicode.com/users`)\n        .then((response) =>{\n            setUsers(response.data);\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    },[]);\n    \n    const filteredUsers = useMemo(() => {\n        if (searchText.trim().length > 0 && users.length > 0) {\n          return users.filter((person) =>\n            person.name.toLowerCase().includes(searchText.toLowerCase())\n          );\n        } else {\n          return users;\n        }\n      }, [searchText, users]);\n      \n    return (\n        <UsersContext.Provider value={filteredUsers}>\n            {children}\n        </UsersContext.Provider>\n            \n    )\n}\nexport default UsersProvider","import React, {useContext} from 'react';\nimport {UsersContext} from '../../contexts/Users'\nimport './style.css';\ntype Props = {\n    filteredUsers:Array<Person>;\n}\ntype Person = {\n    name:string;\n    username:string;\n}\n\nconst UsersList: React.FC = () => {\n    const filteredUsers = useContext(UsersContext);\n\n    return(\n        <div className=\"ListHead\"> \n            <ol className=\"list\">\n                {filteredUsers.map((Person) => (\n                    <li key={Person.name}>\n                        <span>{Person.name}</span>\n                        @{Person.username}\n                    </li>\n            ))}\n            </ol>\n        </div>\n    )}\nexport default UsersList ","import React from 'react';\nimport {DebounceInput} from 'react-debounce-input';\nimport './style.css';\n\ntype Props ={\n   onChange:Function;\n}\n\nconst Debounce:React.FC<Props> = ({onChange}) => {\n  return(\n        <DebounceInput\n          onChange={(e) => onChange(e.target.value)}             \n          debounceTimeout={500}\t                \n          className=\"SearchInput\"\t               \n          placeholder=\"Search by user name...\"\t                \n        />      \n  )\n}\n\nexport default Debounce;","import React from 'react';\nimport './style.css';\n\nconst Header:React.FC = () => {\n\n    return (\n\n        <div className=\"SearchHead\">\n            <p>Users List</p>\n        </div>\n\n    )\n}\n\nexport default Header\n","import React, {useState} from 'react';\nimport UsersList from '../UsersList';\nimport Debounce from '../DebounceInput';\nimport Header from '../Header';\nimport UsersProvider from '../../contexts/Users';\n\nconst Main:React.FC= () => {\n    const [showUser, setShowUser] = useState(\"\");\n    return (\n    <div>\n        <div>\n             <Header/>\n        </div>\n            <UsersProvider searchText={showUser}>\n                <Debounce onChange={setShowUser}/>\n                <UsersList />\n            </UsersProvider>\n        </div>\n    )\n}\nexport default Main","import React, {useState} from 'react';\n\ntype Theme = \"light\" | \"dark\";\ntype ThemeContext = { theme: Theme; toggleTheme: () => void };\n\nexport const ThemeContext = React.createContext<ThemeContext>(\n    {} as ThemeContext\n);\nexport const ThemeProvider: React.FC = ({children}) => {\n    const [theme, setTheme] = useState<Theme>(\"light\");\n    const toggleTheme = () => {\n        setTheme (theme === \"light\" ? \"dark\":\"light\");\n    };\n    const color = theme === \"light\" ? \"black\" : \"#ddd\";\n    const backgroundColor = theme === \"light\" ? \"#eee\" : \"#555\";\n    \n    document.body.style.color = color;\n    document.body.style.background = backgroundColor;\n\n    return(\n        <ThemeContext.Provider value= {{theme, toggleTheme}}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};","import React, {useContext} from 'react';\nimport {ThemeContext} from \"../../contexts/ThemeContext\";\nimport './style.css';\n\nconst ChangeTheme: React.FC = () => {\n    const {theme, toggleTheme} = useContext(ThemeContext);\n    return(\n        <div>\n            <button className=\"SwitchButton\" onClick={toggleTheme}>\n                Switch to {theme === \"light\" ? \"dark\":\"light\"} mode\n            </button>\n        </div>\n    )\n}\nexport default ChangeTheme;","import React from \"react\";\nimport Main from \"./components/Main\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\nimport ChangeTheme from \"./components/ChangeTheme\";\n\n\nconst App = () => {\n  return(\n    <ThemeProvider>\n      <ChangeTheme/>\n      <Main />\n  </ThemeProvider>\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}